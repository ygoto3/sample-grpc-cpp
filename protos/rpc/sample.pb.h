// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: rpc/sample.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_rpc_2fsample_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_rpc_2fsample_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021006 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_rpc_2fsample_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_rpc_2fsample_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_rpc_2fsample_2eproto;
namespace sample {
class AskRequest;
struct AskRequestDefaultTypeInternal;
extern AskRequestDefaultTypeInternal _AskRequest_default_instance_;
class AskResponse;
struct AskResponseDefaultTypeInternal;
extern AskResponseDefaultTypeInternal _AskResponse_default_instance_;
}  // namespace sample
PROTOBUF_NAMESPACE_OPEN
template<> ::sample::AskRequest* Arena::CreateMaybeMessage<::sample::AskRequest>(Arena*);
template<> ::sample::AskResponse* Arena::CreateMaybeMessage<::sample::AskResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace sample {

// ===================================================================

class AskRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sample.AskRequest) */ {
 public:
  inline AskRequest() : AskRequest(nullptr) {}
  ~AskRequest() override;
  explicit PROTOBUF_CONSTEXPR AskRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AskRequest(const AskRequest& from);
  AskRequest(AskRequest&& from) noexcept
    : AskRequest() {
    *this = ::std::move(from);
  }

  inline AskRequest& operator=(const AskRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline AskRequest& operator=(AskRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AskRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const AskRequest* internal_default_instance() {
    return reinterpret_cast<const AskRequest*>(
               &_AskRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(AskRequest& a, AskRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(AskRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AskRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AskRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AskRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AskRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const AskRequest& from) {
    AskRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AskRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sample.AskRequest";
  }
  protected:
  explicit AskRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kQuestionFieldNumber = 1,
  };
  // string question = 1;
  void clear_question();
  const std::string& question() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_question(ArgT0&& arg0, ArgT... args);
  std::string* mutable_question();
  PROTOBUF_NODISCARD std::string* release_question();
  void set_allocated_question(std::string* question);
  private:
  const std::string& _internal_question() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_question(const std::string& value);
  std::string* _internal_mutable_question();
  public:

  // @@protoc_insertion_point(class_scope:sample.AskRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr question_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_rpc_2fsample_2eproto;
};
// -------------------------------------------------------------------

class AskResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sample.AskResponse) */ {
 public:
  inline AskResponse() : AskResponse(nullptr) {}
  ~AskResponse() override;
  explicit PROTOBUF_CONSTEXPR AskResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AskResponse(const AskResponse& from);
  AskResponse(AskResponse&& from) noexcept
    : AskResponse() {
    *this = ::std::move(from);
  }

  inline AskResponse& operator=(const AskResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline AskResponse& operator=(AskResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AskResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const AskResponse* internal_default_instance() {
    return reinterpret_cast<const AskResponse*>(
               &_AskResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(AskResponse& a, AskResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(AskResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AskResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AskResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AskResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AskResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const AskResponse& from) {
    AskResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AskResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sample.AskResponse";
  }
  protected:
  explicit AskResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAnswerFieldNumber = 1,
  };
  // string answer = 1;
  void clear_answer();
  const std::string& answer() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_answer(ArgT0&& arg0, ArgT... args);
  std::string* mutable_answer();
  PROTOBUF_NODISCARD std::string* release_answer();
  void set_allocated_answer(std::string* answer);
  private:
  const std::string& _internal_answer() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_answer(const std::string& value);
  std::string* _internal_mutable_answer();
  public:

  // @@protoc_insertion_point(class_scope:sample.AskResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr answer_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_rpc_2fsample_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// AskRequest

// string question = 1;
inline void AskRequest::clear_question() {
  _impl_.question_.ClearToEmpty();
}
inline const std::string& AskRequest::question() const {
  // @@protoc_insertion_point(field_get:sample.AskRequest.question)
  return _internal_question();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AskRequest::set_question(ArgT0&& arg0, ArgT... args) {
 
 _impl_.question_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sample.AskRequest.question)
}
inline std::string* AskRequest::mutable_question() {
  std::string* _s = _internal_mutable_question();
  // @@protoc_insertion_point(field_mutable:sample.AskRequest.question)
  return _s;
}
inline const std::string& AskRequest::_internal_question() const {
  return _impl_.question_.Get();
}
inline void AskRequest::_internal_set_question(const std::string& value) {
  
  _impl_.question_.Set(value, GetArenaForAllocation());
}
inline std::string* AskRequest::_internal_mutable_question() {
  
  return _impl_.question_.Mutable(GetArenaForAllocation());
}
inline std::string* AskRequest::release_question() {
  // @@protoc_insertion_point(field_release:sample.AskRequest.question)
  return _impl_.question_.Release();
}
inline void AskRequest::set_allocated_question(std::string* question) {
  if (question != nullptr) {
    
  } else {
    
  }
  _impl_.question_.SetAllocated(question, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.question_.IsDefault()) {
    _impl_.question_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sample.AskRequest.question)
}

// -------------------------------------------------------------------

// AskResponse

// string answer = 1;
inline void AskResponse::clear_answer() {
  _impl_.answer_.ClearToEmpty();
}
inline const std::string& AskResponse::answer() const {
  // @@protoc_insertion_point(field_get:sample.AskResponse.answer)
  return _internal_answer();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AskResponse::set_answer(ArgT0&& arg0, ArgT... args) {
 
 _impl_.answer_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sample.AskResponse.answer)
}
inline std::string* AskResponse::mutable_answer() {
  std::string* _s = _internal_mutable_answer();
  // @@protoc_insertion_point(field_mutable:sample.AskResponse.answer)
  return _s;
}
inline const std::string& AskResponse::_internal_answer() const {
  return _impl_.answer_.Get();
}
inline void AskResponse::_internal_set_answer(const std::string& value) {
  
  _impl_.answer_.Set(value, GetArenaForAllocation());
}
inline std::string* AskResponse::_internal_mutable_answer() {
  
  return _impl_.answer_.Mutable(GetArenaForAllocation());
}
inline std::string* AskResponse::release_answer() {
  // @@protoc_insertion_point(field_release:sample.AskResponse.answer)
  return _impl_.answer_.Release();
}
inline void AskResponse::set_allocated_answer(std::string* answer) {
  if (answer != nullptr) {
    
  } else {
    
  }
  _impl_.answer_.SetAllocated(answer, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.answer_.IsDefault()) {
    _impl_.answer_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sample.AskResponse.answer)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace sample

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_rpc_2fsample_2eproto
